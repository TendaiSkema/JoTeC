
Mocca_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  0000088a  0000091e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080025a  0080025a  00000978  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed6  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000331  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6f  00000000  00000000  00001d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00002788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c89  00000000  00000000  00002e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003aae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e8       	ldi	r30, 0x8A	; 138
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 35       	cpi	r26, 0x5A	; 90
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e5       	ldi	r26, 0x5A	; 90
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 36       	cpi	r26, 0x60	; 96
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	33 d0       	rcall	.+102    	; 0x186 <main>
 120:	b2 c3       	rjmp	.+1892   	; 0x886 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <send_data>:

u16  Helligkeit;		// Variable eröffnen (16Bit ohne Vorzeichen, Bereich 0 - 65535)


void send_data(u8 number)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	d8 2f       	mov	r29, r24
	//set send and clock to output
	DDRD = 0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8a b9       	out	0x0a, r24	; 10
	
	//clock pin set high
	clock_high;
 12e:	5e 9a       	sbi	0x0b, 6	; 11
	wait_5ms(2);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	dd d0       	rcall	.+442    	; 0x2f0 <wait_5ms>
	clock_low;
 136:	5e 98       	cbi	0x0b, 6	; 11
	wait_5ms(1);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	d9 d0       	rcall	.+434    	; 0x2f0 <wait_5ms>
 13e:	c8 e0       	ldi	r28, 0x08	; 8
	
	for (u8 i=0;i<8;i++)
	{
		//take msb from number and set data to that bit & clock port high
		PORTD = (number&0x80)|0x40;
 140:	8d 2f       	mov	r24, r29
 142:	80 78       	andi	r24, 0x80	; 128
 144:	80 64       	ori	r24, 0x40	; 64
 146:	8b b9       	out	0x0b, r24	; 11
		//shift number for sending the next bit
		number<<=1;
		//wait some time
		wait_5ms(2);
 148:	dd 0f       	add	r29, r29
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
		
		//clock low
		clock_low;
 14e:	d0 d0       	rcall	.+416    	; 0x2f0 <wait_5ms>
 150:	5e 98       	cbi	0x0b, 6	; 11
	clock_high;
	wait_5ms(2);
	clock_low;
	wait_5ms(1);
	
	for (u8 i=0;i<8;i++)
 152:	c1 50       	subi	r28, 0x01	; 1
		//clock low
		clock_low;
	}
	
	//set port D to default
	DDRD = 0x3F;
 154:	a9 f7       	brne	.-22     	; 0x140 <send_data+0x1c>
 156:	8f e3       	ldi	r24, 0x3F	; 63
}
 158:	8a b9       	out	0x0a, r24	; 10
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <recieve_data>:

u8 recieve_data()
{
	//set send and clock to output
	DDRD = 0x3F;
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	8a b9       	out	0x0a, r24	; 10
	u8 rec = 0; 
	
	//wait for end of wakeup signal
	while((PIND & 0x40));
 164:	4e 99       	sbic	0x09, 6	; 9
 166:	fe cf       	rjmp	.-4      	; 0x164 <recieve_data+0x4>
 168:	28 e0       	ldi	r18, 0x08	; 8
 16a:	80 e0       	ldi	r24, 0x00	; 0
	
	for (u8 i=0;i<8;i++)
	{
		while(!(PIND & 0x40));
 16c:	4e 9b       	sbis	0x09, 6	; 9
 16e:	fe cf       	rjmp	.-4      	; 0x16c <recieve_data+0xc>
		
		rec<<=1;
 170:	88 0f       	add	r24, r24
		rec += ((PIND & 0x80)>>7);
 172:	99 b1       	in	r25, 0x09	; 9
 174:	99 1f       	adc	r25, r25
 176:	99 27       	eor	r25, r25
 178:	99 1f       	adc	r25, r25
 17a:	89 0f       	add	r24, r25
		
		
		while((PIND & 0x40));
 17c:	4e 99       	sbic	0x09, 6	; 9
 17e:	fe cf       	rjmp	.-4      	; 0x17c <recieve_data+0x1c>
 180:	21 50       	subi	r18, 0x01	; 1
	u8 rec = 0; 
	
	//wait for end of wakeup signal
	while((PIND & 0x40));
	
	for (u8 i=0;i<8;i++)
 182:	a1 f7       	brne	.-24     	; 0x16c <recieve_data+0xc>
		
		
		while((PIND & 0x40));
	}
	return rec;
}
 184:	08 95       	ret

00000186 <main>:

// Hauptprogramm
void main(void)
{
	// Initialisierung: Board und Peripherie
	init_mocca();
 186:	3c d3       	rcall	.+1656   	; 0x800 <init_mocca>
 188:	fe d2       	rcall	.+1532   	; 0x786 <init_lcd>
 18a:	e4 d0       	rcall	.+456    	; 0x354 <init_ADC>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	af d0       	rcall	.+350    	; 0x2f0 <wait_5ms>
 192:	2a d1       	rcall	.+596    	; 0x3e8 <init_RGB>
 194:	ea d2       	rcall	.+1492   	; 0x76a <clear_lcd_f>
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	8a b9       	out	0x0a, r24	; 10
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	f3 d0       	rcall	.+486    	; 0x384 <read_ADC>
 19e:	1f ef       	ldi	r17, 0xFF	; 255
 1a0:	89 e0       	ldi	r24, 0x09	; 9
 1a2:	f0 d0       	rcall	.+480    	; 0x384 <read_ADC>
 1a4:	ac 01       	movw	r20, r24
 1a6:	9c 01       	movw	r18, r24
 1a8:	a1 e8       	ldi	r26, 0x81	; 129
 1aa:	b0 e8       	ldi	r27, 0x80	; 128
 1ac:	5d d3       	rcall	.+1722   	; 0x868 <__umulhisi3>
 1ae:	ec 01       	movw	r28, r24
 1b0:	cc 0f       	add	r28, r28
 1b2:	cd 2f       	mov	r28, r29
 1b4:	cc 1f       	adc	r28, r28
 1b6:	dd 0b       	sbc	r29, r29
 1b8:	d1 95       	neg	r29
 1ba:	1c 9f       	mul	r17, r28
 1bc:	c0 01       	movw	r24, r0
 1be:	1d 9f       	mul	r17, r29
 1c0:	90 0d       	add	r25, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	ea 01       	movw	r28, r20
 1c6:	c8 1b       	sub	r28, r24
 1c8:	d9 0b       	sbc	r29, r25
 1ca:	6e 01       	movw	r12, r28
 1cc:	dd 24       	eor	r13, r13
 1ce:	e1 2c       	mov	r14, r1
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	24 e0       	ldi	r18, 0x04	; 4
 1d4:	a6 01       	movw	r20, r12
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	cc d1       	rcall	.+920    	; 0x574 <write_zahl>
 1dc:	64 9b       	sbis	0x0c, 4	; 12
 1de:	10 c0       	rjmp	.+32     	; 0x200 <main+0x7a>
 1e0:	8c 2f       	mov	r24, r28
 1e2:	a0 df       	rcall	.-192    	; 0x124 <send_data>
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	52 e0       	ldi	r21, 0x02	; 2
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	a2 d1       	rcall	.+836    	; 0x532 <write_text>
 1ee:	24 e0       	ldi	r18, 0x04	; 4
 1f0:	a6 01       	movw	r20, r12
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	be d1       	rcall	.+892    	; 0x574 <write_zahl>
 1f8:	88 ee       	ldi	r24, 0xE8	; 232
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	79 d0       	rcall	.+242    	; 0x2f0 <wait_5ms>
 1fe:	b5 d2       	rcall	.+1386   	; 0x76a <clear_lcd_f>
 200:	89 b1       	in	r24, 0x09	; 9
 202:	80 74       	andi	r24, 0x40	; 64
 204:	89 b9       	out	0x09, r24	; 9
 206:	88 23       	and	r24, r24
 208:	59 f2       	breq	.-106    	; 0x1a0 <main+0x1a>
 20a:	aa df       	rcall	.-172    	; 0x160 <recieve_data>
 20c:	c8 2f       	mov	r28, r24
 20e:	4b e0       	ldi	r20, 0x0B	; 11
 210:	52 e0       	ldi	r21, 0x02	; 2
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	8d d1       	rcall	.+794    	; 0x532 <write_text>
 218:	4c 2f       	mov	r20, r28
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	e1 2c       	mov	r14, r1
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	24 e0       	ldi	r18, 0x04	; 4
 222:	67 e0       	ldi	r22, 0x07	; 7
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	a6 d1       	rcall	.+844    	; 0x574 <write_zahl>
 228:	88 ee       	ldi	r24, 0xE8	; 232
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	61 d0       	rcall	.+194    	; 0x2f0 <wait_5ms>
 22e:	b8 cf       	rjmp	.-144    	; 0x1a0 <main+0x1a>

00000230 <init_5ms_timer>:
		   else PORTH &= 0xDF;
	
	// Wenn PWM initialisirt ist wert an PWM register übergeben
	Blau	= 1023 - Blau;
	OCR4CH = (Blau >>8);
	OCR4CL = (Blau & 0x00FF);
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	84 bd       	out	0x24, r24	; 36
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	85 bd       	out	0x25, r24	; 37
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 23e:	83 e2       	ldi	r24, 0x23	; 35
 240:	87 bd       	out	0x27, r24	; 39
 242:	08 95       	ret

00000244 <__vector_23>:
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <takt_5ms_zaehler>
 266:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <takt_5ms_zaehler+0x1>
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <takt_5ms_zaehler+0x1>
 270:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <takt_5ms_zaehler>
 274:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <time_cnt>
 278:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <time_cnt+0x1>
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <time_cnt+0x1>
 282:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <time_cnt>
 286:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <time_cnt>
 28a:	50 91 5d 02 	lds	r21, 0x025D	; 0x80025d <time_cnt+0x1>
 28e:	9a 01       	movw	r18, r20
 290:	ad ec       	ldi	r26, 0xCD	; 205
 292:	bc ec       	ldi	r27, 0xCC	; 204
 294:	e9 d2       	rcall	.+1490   	; 0x868 <__umulhisi3>
 296:	92 95       	swap	r25
 298:	82 95       	swap	r24
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	89 27       	eor	r24, r25
 29e:	9f 70       	andi	r25, 0x0F	; 15
 2a0:	89 27       	eor	r24, r25
 2a2:	64 e1       	ldi	r22, 0x14	; 20
 2a4:	68 9f       	mul	r22, r24
 2a6:	90 01       	movw	r18, r0
 2a8:	69 9f       	mul	r22, r25
 2aa:	30 0d       	add	r19, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	42 17       	cp	r20, r18
 2b0:	53 07       	cpc	r21, r19
 2b2:	49 f4       	brne	.+18     	; 0x2c6 <__vector_23+0x82>
 2b4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
 2b8:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__data_end+0x1>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <__data_end+0x1>
 2c2:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <__data_end>
 2c6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
 2ca:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__data_end+0x1>
 2ce:	80 95       	com	r24
 2d0:	82 b9       	out	0x02, r24	; 2
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <wait_5ms>:
 2f0:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <takt_5ms_zaehler+0x1>
 2f4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <takt_5ms_zaehler>
 2f8:	89 2b       	or	r24, r25
 2fa:	31 f0       	breq	.+12     	; 0x308 <wait_5ms+0x18>
 2fc:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <takt_5ms_zaehler>
 300:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <takt_5ms_zaehler+0x1>
 304:	89 2b       	or	r24, r25
 306:	d1 f7       	brne	.-12     	; 0x2fc <wait_5ms+0xc>
 308:	08 95       	ret

0000030a <wait_1us>:
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	1f 92       	push	r1
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	9a 83       	std	Y+2, r25	; 0x02
 318:	89 83       	std	Y+1, r24	; 0x01
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	9a 81       	ldd	r25, Y+2	; 0x02
 31e:	89 2b       	or	r24, r25
 320:	a1 f0       	breq	.+40     	; 0x34a <wait_1us+0x40>
	...
 336:	00 00       	nop
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	9a 81       	ldd	r25, Y+2	; 0x02
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	89 2b       	or	r24, r25
 348:	61 f7       	brne	.-40     	; 0x322 <wait_1us+0x18>
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <init_ADC>:
 354:	80 e4       	ldi	r24, 0x40	; 64
 356:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 35a:	8f e0       	ldi	r24, 0x0F	; 15
 35c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 360:	ea e7       	ldi	r30, 0x7A	; 122
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	87 ea       	ldi	r24, 0xA7	; 167
 366:	80 83       	st	Z, r24
 368:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 36c:	80 81       	ld	r24, Z
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	80 83       	st	Z, r24
 372:	80 81       	ld	r24, Z
 374:	84 ff       	sbrs	r24, 4
 376:	fd cf       	rjmp	.-6      	; 0x372 <init_ADC+0x1e>
 378:	ea e7       	ldi	r30, 0x7A	; 122
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	8f 7e       	andi	r24, 0xEF	; 239
 380:	80 83       	st	Z, r24
 382:	08 95       	ret

00000384 <read_ADC>:
 384:	90 e4       	ldi	r25, 0x40	; 64
 386:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 38a:	88 30       	cpi	r24, 0x08	; 8
 38c:	60 f0       	brcs	.+24     	; 0x3a6 <read_ADC+0x22>
 38e:	ec e7       	ldi	r30, 0x7C	; 124
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	90 81       	ld	r25, Z
 394:	88 50       	subi	r24, 0x08	; 8
 396:	89 2b       	or	r24, r25
 398:	80 83       	st	Z, r24
 39a:	eb e7       	ldi	r30, 0x7B	; 123
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	88 61       	ori	r24, 0x18	; 24
 3a2:	80 83       	st	Z, r24
 3a4:	0a c0       	rjmp	.+20     	; 0x3ba <read_ADC+0x36>
 3a6:	ec e7       	ldi	r30, 0x7C	; 124
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	90 81       	ld	r25, Z
 3ac:	89 2b       	or	r24, r25
 3ae:	80 83       	st	Z, r24
 3b0:	eb e7       	ldi	r30, 0x7B	; 123
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	87 7e       	andi	r24, 0xE7	; 231
 3b8:	80 83       	st	Z, r24
 3ba:	ea e7       	ldi	r30, 0x7A	; 122
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	80 64       	ori	r24, 0x40	; 64
 3c2:	80 83       	st	Z, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	84 ff       	sbrs	r24, 4
 3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <read_ADC+0x40>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	90 df       	rcall	.-224    	; 0x2f0 <wait_5ms>
 3d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 3d4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 3d8:	ea e7       	ldi	r30, 0x7A	; 122
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	90 81       	ld	r25, Z
 3de:	9f 7e       	andi	r25, 0xEF	; 239
 3e0:	90 83       	st	Z, r25
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	92 2b       	or	r25, r18
 3e6:	08 95       	ret

000003e8 <init_RGB>:
 3e8:	8e ef       	ldi	r24, 0xFE	; 254
 3ea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 3ee:	8b e1       	ldi	r24, 0x1B	; 27
 3f0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 400:	08 95       	ret

00000402 <lcd_sid>:
//--------------------------------------------------------------------------------------------
// Ansteuerung von einzelen Bits fur LCD
//--------------------------------------------------------------------------------------------
void lcd_sid(uint8_t status)		// LCD Datenleitung
{
	if(status)	PORTG |= 0x01;
 402:	88 23       	and	r24, r24
 404:	11 f0       	breq	.+4      	; 0x40a <lcd_sid+0x8>
 406:	a0 9a       	sbi	0x14, 0	; 20
 408:	08 95       	ret
	else PORTG &= 0xFE; 
 40a:	a0 98       	cbi	0x14, 0	; 20
 40c:	08 95       	ret

0000040e <lcd_sclk>:
}

void lcd_sclk(uint8_t status)		// LCD Taktleitung
{
	if(status)	PORTG |= 0x02;
 40e:	88 23       	and	r24, r24
 410:	11 f0       	breq	.+4      	; 0x416 <lcd_sclk+0x8>
 412:	a1 9a       	sbi	0x14, 1	; 20
 414:	08 95       	ret
	else PORTG &= 0xFD;
 416:	a1 98       	cbi	0x14, 1	; 20
 418:	08 95       	ret

0000041a <lcd_on_off>:
}

void lcd_on_off(uint8_t status)		//LCD ein/Aus
{
	if(status)	PORTG |= 0x20;
 41a:	88 23       	and	r24, r24
 41c:	11 f0       	breq	.+4      	; 0x422 <lcd_on_off+0x8>
 41e:	a5 9a       	sbi	0x14, 5	; 20
 420:	08 95       	ret
	else PORTG &= ~0x20;
 422:	a5 98       	cbi	0x14, 5	; 20
 424:	08 95       	ret

00000426 <lcd_light>:
//--------------------------------------------------------------------------------------------
// LCD Hintergundbeleuchtung mit PWM dimmen (0 bis 100%) Timer 0 muss initialisiert sein! 
//--------------------------------------------------------------------------------------------
void lcd_light(uint8_t hellighkeit) // Werte von 0 bis 10 möglich -> 0 = Aus , 1= 10%, 10 = 100%
{
	if(hellighkeit == 0)
 426:	81 11       	cpse	r24, r1
 428:	04 c0       	rjmp	.+8      	; 0x432 <lcd_light+0xc>
	{
		TCCR0A &= 0b11011111; //Wenn heligkeit 0 -> Hintergrundbeleuchtung ausschalten
 42a:	84 b5       	in	r24, 0x24	; 36
 42c:	8f 7d       	andi	r24, 0xDF	; 223
 42e:	84 bd       	out	0x24, r24	; 36
 430:	08 95       	ret
	}
	else
	{
		TCCR0A |= 0b00100000;
 432:	94 b5       	in	r25, 0x24	; 36
 434:	90 62       	ori	r25, 0x20	; 32
 436:	94 bd       	out	0x24, r25	; 36
		if(hellighkeit >10)hellighkeit = 10;
		OCR0B = (hellighkeit*8);// + 178;
 438:	8b 30       	cpi	r24, 0x0B	; 11
 43a:	08 f0       	brcs	.+2      	; 0x43e <lcd_light+0x18>
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	88 0f       	add	r24, r24
 440:	88 0f       	add	r24, r24
 442:	88 0f       	add	r24, r24
 444:	88 bd       	out	0x28, r24	; 40
 446:	08 95       	ret

00000448 <write_lcd_f>:

//--------------------------------------------------------------------------------------------
// Schreibt ein Kommando oder ein Datenbyte (Zeichen) zum LCD SPI (Serial Protokoll Interface)
//--------------------------------------------------------------------------------------------
void write_lcd_f(uint16_t rs, uint16_t value)
{ uint16_t i;
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	7c 01       	movw	r14, r24
 456:	eb 01       	movw	r28, r22
	// Manche Befehle müssen doppelt ausgeführt werden, damit die
	// minimale Pulslänge von 400ns eingehalten wird. (bei 20MHz)

	// Synchronisierung: 5x "1" senden
	lcd_sid(1);				// Daten-Bit = 1
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	d3 df       	rcall	.-90     	; 0x402 <lcd_sid>
 45c:	05 e0       	ldi	r16, 0x05	; 5
	for(i=0;i<5; i++)
	{	
		lcd_sclk(0);			// Synch-Bits senden
 45e:	10 e0       	ldi	r17, 0x00	; 0
		lcd_sclk(1);
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	d5 df       	rcall	.-86     	; 0x40e <lcd_sclk>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	d3 df       	rcall	.-90     	; 0x40e <lcd_sclk>
	}
	// R/W: 1=Read, 0=Write
	lcd_sid(0);				    // R/W = 0
 468:	01 50       	subi	r16, 0x01	; 1
	lcd_sclk(0);				// R/W-Bit senden
 46a:	11 09       	sbc	r17, r1
 46c:	c9 f7       	brne	.-14     	; 0x460 <write_lcd_f+0x18>
 46e:	80 e0       	ldi	r24, 0x00	; 0
	lcd_sclk(1);
 470:	c8 df       	rcall	.-112    	; 0x402 <lcd_sid>
 472:	80 e0       	ldi	r24, 0x00	; 0

	// RS Register Selection: 0=Command, 1=Data
	if (rs == 'C') lcd_sid(0);
 474:	cc df       	rcall	.-104    	; 0x40e <lcd_sclk>
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	ca df       	rcall	.-108    	; 0x40e <lcd_sclk>
	else lcd_sid(1);
 47a:	83 e4       	ldi	r24, 0x43	; 67

	lcd_sclk(0);				// RS-Bit senden
 47c:	e8 16       	cp	r14, r24
 47e:	f1 04       	cpc	r15, r1
	lcd_sclk(1);
 480:	19 f4       	brne	.+6      	; 0x488 <write_lcd_f+0x40>
 482:	80 e0       	ldi	r24, 0x00	; 0

	// End-Marke 0
	lcd_sid(0);
 484:	be df       	rcall	.-132    	; 0x402 <lcd_sid>
 486:	02 c0       	rjmp	.+4      	; 0x48c <write_lcd_f+0x44>
	
	lcd_sclk(0);				// END-Bit senden
 488:	81 e0       	ldi	r24, 0x01	; 1
	lcd_sclk(1);
 48a:	bb df       	rcall	.-138    	; 0x402 <lcd_sid>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	bf df       	rcall	.-130    	; 0x40e <lcd_sclk>
	
	// Daten-Bit 0-3
	for(i=0;i<4; i++)
	{	
		lcd_sclk(0);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	bd df       	rcall	.-134    	; 0x40e <lcd_sclk>
		if (value & 0x01) lcd_sid(1);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	b5 df       	rcall	.-150    	; 0x402 <lcd_sid>
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	b9 df       	rcall	.-142    	; 0x40e <lcd_sclk>
 49c:	81 e0       	ldi	r24, 0x01	; 1
		else lcd_sid(0);
 49e:	b7 df       	rcall	.-146    	; 0x40e <lcd_sclk>
		value = value >> 1;
 4a0:	04 e0       	ldi	r16, 0x04	; 4
		lcd_sclk(0);
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	b3 df       	rcall	.-154    	; 0x40e <lcd_sclk>
		lcd_sclk(1);
 4a8:	c0 ff       	sbrs	r28, 0
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <write_lcd_f+0x6a>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	a9 df       	rcall	.-174    	; 0x402 <lcd_sid>
	}

	lcd_sid(0);		// 4x "0" senden
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <write_lcd_f+0x6e>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	a6 df       	rcall	.-180    	; 0x402 <lcd_sid>
	for(i=0;i<4; i++)
	{	
		lcd_sclk(0);
 4b6:	d6 95       	lsr	r29
 4b8:	c7 95       	ror	r28
		lcd_sclk(1);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	a8 df       	rcall	.-176    	; 0x40e <lcd_sclk>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	a6 df       	rcall	.-180    	; 0x40e <lcd_sclk>
		lcd_sclk(0);
		lcd_sclk(1);
	}

	lcd_sid(0);		// 4x "0" senden
	for(i=0;i<4; i++)
 4c2:	01 50       	subi	r16, 0x01	; 1
 4c4:	11 09       	sbc	r17, r1
	}
	
	// Daten-Bit 4-7
	for(i=0;i<4; i++)
	{	
		lcd_sclk(0);
 4c6:	71 f7       	brne	.-36     	; 0x4a4 <write_lcd_f+0x5c>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
		if (value & 0x01) lcd_sid(1);
 4ca:	9b df       	rcall	.-202    	; 0x402 <lcd_sid>
 4cc:	04 e0       	ldi	r16, 0x04	; 4
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	80 e0       	ldi	r24, 0x00	; 0
		else lcd_sid(0);
 4d2:	9d df       	rcall	.-198    	; 0x40e <lcd_sclk>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
		value = value >> 1;
 4d6:	9b df       	rcall	.-202    	; 0x40e <lcd_sclk>
 4d8:	01 50       	subi	r16, 0x01	; 1
		lcd_sclk(0);
 4da:	11 09       	sbc	r17, r1
 4dc:	c9 f7       	brne	.-14     	; 0x4d0 <write_lcd_f+0x88>
 4de:	04 e0       	ldi	r16, 0x04	; 4
		lcd_sclk(1);
 4e0:	10 e0       	ldi	r17, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	94 df       	rcall	.-216    	; 0x40e <lcd_sclk>
 4e6:	c0 ff       	sbrs	r28, 0
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <write_lcd_f+0xa8>
		lcd_sclk(0);
		lcd_sclk(1);
	}
	
	// Daten-Bit 4-7
	for(i=0;i<4; i++)
 4ea:	81 e0       	ldi	r24, 0x01	; 1
		value = value >> 1;
		lcd_sclk(0);
		lcd_sclk(1);
	}
	
	lcd_sid(0);			// 4x "0" senden
 4ec:	8a df       	rcall	.-236    	; 0x402 <lcd_sid>
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <write_lcd_f+0xac>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	87 df       	rcall	.-242    	; 0x402 <lcd_sid>
 4f4:	d6 95       	lsr	r29
	for(i=0;i<4; i++)
	{	
		lcd_sclk(0);
 4f6:	c7 95       	ror	r28
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	89 df       	rcall	.-238    	; 0x40e <lcd_sclk>
		lcd_sclk(1);
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	87 df       	rcall	.-242    	; 0x40e <lcd_sclk>
 500:	01 50       	subi	r16, 0x01	; 1
 502:	11 09       	sbc	r17, r1
		lcd_sclk(0);
		lcd_sclk(1);
	}
	
	lcd_sid(0);			// 4x "0" senden
	for(i=0;i<4; i++)
 504:	71 f7       	brne	.-36     	; 0x4e2 <write_lcd_f+0x9a>
	{	
		lcd_sclk(0);
		lcd_sclk(1);
	}
	
	lcd_sid(1);
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	7c df       	rcall	.-264    	; 0x402 <lcd_sid>
 50a:	c4 e0       	ldi	r28, 0x04	; 4
	// Write-Befehl auf 50us verlängern, damit minimale Execution-Time 39us/43us eingehalten ist.
	wait_1us(50);
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	7e df       	rcall	.-260    	; 0x40e <lcd_sclk>
 512:	81 e0       	ldi	r24, 0x01	; 1
}
 514:	7c df       	rcall	.-264    	; 0x40e <lcd_sclk>
 516:	21 97       	sbiw	r28, 0x01	; 1
 518:	d1 f7       	brne	.-12     	; 0x50e <write_lcd_f+0xc6>
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	72 df       	rcall	.-284    	; 0x402 <lcd_sid>
 51e:	82 e3       	ldi	r24, 0x32	; 50
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	f3 de       	rcall	.-538    	; 0x30a <wait_1us>
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	08 95       	ret

00000532 <write_text>:

//------------------------------------------------------------
// Text an xy-Position ausgeben
//------------------------------------------------------------
void write_text(uint8_t y_pos, uint8_t x_pos, char *str_ptr)
{
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	8a 01       	movw	r16, r20
	uint8_t str_p = 0;
	uint8_t pos;
	pos = x_pos + (y_pos * 0x20);
	write_lcd_f('C',pos | 0x80);
 53a:	90 e2       	ldi	r25, 0x20	; 32
 53c:	89 9f       	mul	r24, r25
 53e:	60 0d       	add	r22, r0
 540:	11 24       	eor	r1, r1
 542:	60 68       	ori	r22, 0x80	; 128
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	83 e4       	ldi	r24, 0x43	; 67
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	7e df       	rcall	.-260    	; 0x448 <write_lcd_f>

	while(str_ptr[str_p])
 54c:	f8 01       	movw	r30, r16
 54e:	60 81       	ld	r22, Z
 550:	66 23       	and	r22, r22
 552:	61 f0       	breq	.+24     	; 0x56c <write_text+0x3a>
 554:	c0 e0       	ldi	r28, 0x00	; 0
	{ write_lcd_f('D',str_ptr[str_p++]);
 556:	cf 5f       	subi	r28, 0xFF	; 255
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	84 e4       	ldi	r24, 0x44	; 68
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	74 df       	rcall	.-280    	; 0x448 <write_lcd_f>
	uint8_t str_p = 0;
	uint8_t pos;
	pos = x_pos + (y_pos * 0x20);
	write_lcd_f('C',pos | 0x80);

	while(str_ptr[str_p])
 560:	f8 01       	movw	r30, r16
 562:	ec 0f       	add	r30, r28
 564:	f1 1d       	adc	r31, r1
 566:	60 81       	ld	r22, Z
 568:	61 11       	cpse	r22, r1
 56a:	f5 cf       	rjmp	.-22     	; 0x556 <write_text+0x24>
	{ write_lcd_f('D',str_ptr[str_p++]);
	}
}
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <write_zahl>:

//------------------------------------------------------------
// Zahl an xy-Position ausgeben dezimal
//------------------------------------------------------------
void write_zahl(uint8_t x_pos, uint8_t y_pos, uint16_t zahl_v, uint8_t s_vk, uint8_t s_nk, uint8_t komma)
{ 
 574:	2f 92       	push	r2
 576:	3f 92       	push	r3
 578:	4f 92       	push	r4
 57a:	5f 92       	push	r5
 57c:	6f 92       	push	r6
 57e:	7f 92       	push	r7
 580:	8f 92       	push	r8
 582:	9f 92       	push	r9
 584:	af 92       	push	r10
 586:	bf 92       	push	r11
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	2c 97       	sbiw	r28, 0x0c	; 12
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	38 2e       	mov	r3, r24
 5aa:	86 2e       	mov	r8, r22
 5ac:	92 2e       	mov	r9, r18
 5ae:	2e 2c       	mov	r2, r14
	// Umwandlung in die einzelnen Stellen-Zahlen 1er, 10er, 100er, ...
	//  zahl = 12345;
	//  s_vk = 2;
	//  s_nk = 0;
	//  komma = 0;
	send_buffer[11] = (zahl_v % 10) + 48;
 5b0:	9a 01       	movw	r18, r20
 5b2:	ad ec       	ldi	r26, 0xCD	; 205
 5b4:	bc ec       	ldi	r27, 0xCC	; 204
 5b6:	58 d1       	rcall	.+688    	; 0x868 <__umulhisi3>
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	96 95       	lsr	r25
 5be:	87 95       	ror	r24
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	9c 01       	movw	r18, r24
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	82 0f       	add	r24, r18
 5d8:	93 1f       	adc	r25, r19
 5da:	9a 01       	movw	r18, r20
 5dc:	28 1b       	sub	r18, r24
 5de:	39 0b       	sbc	r19, r25
 5e0:	c9 01       	movw	r24, r18
 5e2:	80 5d       	subi	r24, 0xD0	; 208
 5e4:	8c 87       	std	Y+12, r24	; 0x0c
	i = 10;
 5e6:	1a e0       	ldi	r17, 0x0A	; 10
//------------------------------------------------------------
// Zahl an xy-Position ausgeben dezimal
//------------------------------------------------------------
void write_zahl(uint8_t x_pos, uint8_t y_pos, uint16_t zahl_v, uint8_t s_vk, uint8_t s_nk, uint8_t komma)
{ 
	unsigned long zehner = 10;
 5e8:	0f 2e       	mov	r0, r31
 5ea:	fa e0       	ldi	r31, 0x0A	; 10
 5ec:	cf 2e       	mov	r12, r31
 5ee:	d1 2c       	mov	r13, r1
 5f0:	e1 2c       	mov	r14, r1
 5f2:	f1 2c       	mov	r15, r1
 5f4:	f0 2d       	mov	r31, r0
	//  s_nk = 0;
	//  komma = 0;
	send_buffer[11] = (zahl_v % 10) + 48;
	i = 10;
	do
	{ send_buffer[i] = (zahl_v / zehner % 10) + 48;
 5f6:	2a 01       	movw	r4, r20
 5f8:	61 2c       	mov	r6, r1
 5fa:	71 2c       	mov	r7, r1
 5fc:	aa 24       	eor	r10, r10
 5fe:	a3 94       	inc	r10
 600:	b1 2c       	mov	r11, r1
 602:	ac 0e       	add	r10, r28
 604:	bd 1e       	adc	r11, r29
 606:	a1 0e       	add	r10, r17
 608:	b1 1c       	adc	r11, r1
 60a:	c3 01       	movw	r24, r6
 60c:	b2 01       	movw	r22, r4
 60e:	a7 01       	movw	r20, r14
 610:	96 01       	movw	r18, r12
 612:	08 d1       	rcall	.+528    	; 0x824 <__udivmodsi4>
 614:	ca 01       	movw	r24, r20
 616:	b9 01       	movw	r22, r18
 618:	2a e0       	ldi	r18, 0x0A	; 10
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	01 d1       	rcall	.+514    	; 0x824 <__udivmodsi4>
 622:	60 5d       	subi	r22, 0xD0	; 208
 624:	f5 01       	movw	r30, r10
 626:	60 83       	st	Z, r22
		zehner *= 10;
 628:	cc 0c       	add	r12, r12
 62a:	dd 1c       	adc	r13, r13
 62c:	ee 1c       	adc	r14, r14
 62e:	ff 1c       	adc	r15, r15
 630:	d7 01       	movw	r26, r14
 632:	c6 01       	movw	r24, r12
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	aa 1f       	adc	r26, r26
 63a:	bb 1f       	adc	r27, r27
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	aa 1f       	adc	r26, r26
 642:	bb 1f       	adc	r27, r27
 644:	c8 0e       	add	r12, r24
 646:	d9 1e       	adc	r13, r25
 648:	ea 1e       	adc	r14, r26
 64a:	fb 1e       	adc	r15, r27
	}while(i--);
 64c:	11 50       	subi	r17, 0x01	; 1
 64e:	b0 f6       	brcc	.-84     	; 0x5fc <write_zahl+0x88>
	
	// Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
 650:	8c e0       	ldi	r24, 0x0C	; 12
 652:	89 19       	sub	r24, r9
 654:	82 19       	sub	r24, r2
	for (i=0; i<s_vk; i++)
 656:	99 20       	and	r9, r9
 658:	09 f4       	brne	.+2      	; 0x65c <write_zahl+0xe8>
 65a:	6a c0       	rjmp	.+212    	; 0x730 <write_zahl+0x1bc>
 65c:	fe 01       	movw	r30, r28
 65e:	31 96       	adiw	r30, 0x01	; 1
 660:	29 2d       	mov	r18, r9
 662:	28 0f       	add	r18, r24
	{ send_buffer[pos++] = send_buffer[pos_t++];
 664:	a1 e0       	ldi	r26, 0x01	; 1
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	ac 0f       	add	r26, r28
 66a:	bd 1f       	adc	r27, r29
 66c:	a8 0f       	add	r26, r24
 66e:	b1 1d       	adc	r27, r1
 670:	9c 91       	ld	r25, X
 672:	91 93       	st	Z+, r25
 674:	8f 5f       	subi	r24, 0xFF	; 255
	}while(i--);
	
	// Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
	for (i=0; i<s_vk; i++)
 676:	82 13       	cpse	r24, r18
 678:	f5 cf       	rjmp	.-22     	; 0x664 <write_zahl+0xf0>
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 67a:	00 23       	and	r16, r16
 67c:	19 f1       	breq	.+70     	; 0x6c4 <write_zahl+0x150>
	{ send_buffer[pos++] = '.';
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	49 0d       	add	r20, r9
 682:	8e e2       	ldi	r24, 0x2E	; 46
 684:	fe 01       	movw	r30, r28
 686:	e9 0d       	add	r30, r9
 688:	f1 1d       	adc	r31, r1
 68a:	81 83       	std	Z+1, r24	; 0x01

		// Nach-Kommastellen kopieren
		pos_t = 12-komma;
 68c:	3c e0       	ldi	r19, 0x0C	; 12
 68e:	32 19       	sub	r19, r2
	pos_t = 12-komma-s_vk;
	for (i=0; i<s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
	{ send_buffer[pos++] = '.';
 690:	84 2f       	mov	r24, r20

		// Nach-Kommastellen kopieren
		pos_t = 12-komma;
		for (i=0; i<s_nk; i++)
		{ send_buffer[pos++] = send_buffer[pos_t++];
 692:	34 1b       	sub	r19, r20
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	98 0f       	add	r25, r24
 698:	23 2f       	mov	r18, r19
 69a:	28 0f       	add	r18, r24
 69c:	e1 e0       	ldi	r30, 0x01	; 1
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	ec 0f       	add	r30, r28
 6a2:	fd 1f       	adc	r31, r29
 6a4:	e2 0f       	add	r30, r18
 6a6:	f1 1d       	adc	r31, r1
 6a8:	20 81       	ld	r18, Z
 6aa:	e1 e0       	ldi	r30, 0x01	; 1
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	ec 0f       	add	r30, r28
 6b0:	fd 1f       	adc	r31, r29
 6b2:	e8 0f       	add	r30, r24
 6b4:	f1 1d       	adc	r31, r1
 6b6:	20 83       	st	Z, r18
 6b8:	89 2f       	mov	r24, r25
	if (s_nk > 0)
	{ send_buffer[pos++] = '.';

		// Nach-Kommastellen kopieren
		pos_t = 12-komma;
		for (i=0; i<s_nk; i++)
 6ba:	29 2f       	mov	r18, r25
 6bc:	24 1b       	sub	r18, r20
 6be:	20 17       	cp	r18, r16
 6c0:	48 f3       	brcs	.-46     	; 0x694 <write_zahl+0x120>
 6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <write_zahl+0x152>
	
	// Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
	for (i=0; i<s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
 6c4:	99 2d       	mov	r25, r9
		pos_t = 12-komma;
		for (i=0; i<s_nk; i++)
		{ send_buffer[pos++] = send_buffer[pos_t++];
		}
	}
	send_buffer[pos] = 0;     // Endmarke des Strings setzen
 6c6:	fe 01       	movw	r30, r28
 6c8:	e9 0f       	add	r30, r25
 6ca:	f1 1d       	adc	r31, r1
 6cc:	11 82       	std	Z+1, r1	; 0x01
	
	// Vorangehende Nullen löschen
	i = 0;
	while ( (send_buffer[i] == 48) && (i < s_vk-1) )
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
 6d0:	80 33       	cpi	r24, 0x30	; 48
 6d2:	09 f5       	brne	.+66     	; 0x716 <write_zahl+0x1a2>
 6d4:	49 2d       	mov	r20, r9
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	41 50       	subi	r20, 0x01	; 1
 6da:	51 09       	sbc	r21, r1
 6dc:	14 16       	cp	r1, r20
 6de:	15 06       	cpc	r1, r21
 6e0:	d4 f4       	brge	.+52     	; 0x716 <write_zahl+0x1a2>
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	20 e0       	ldi	r18, 0x00	; 0
	{ send_buffer[i++] = 32;
 6e8:	60 e2       	ldi	r22, 0x20	; 32
 6ea:	2f 5f       	subi	r18, 0xFF	; 255
 6ec:	e1 e0       	ldi	r30, 0x01	; 1
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ec 0f       	add	r30, r28
 6f2:	fd 1f       	adc	r31, r29
 6f4:	e8 0f       	add	r30, r24
 6f6:	f9 1f       	adc	r31, r25
 6f8:	60 83       	st	Z, r22
	}
	send_buffer[pos] = 0;     // Endmarke des Strings setzen
	
	// Vorangehende Nullen löschen
	i = 0;
	while ( (send_buffer[i] == 48) && (i < s_vk-1) )
 6fa:	82 2f       	mov	r24, r18
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	e1 e0       	ldi	r30, 0x01	; 1
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	ec 0f       	add	r30, r28
 704:	fd 1f       	adc	r31, r29
 706:	e8 0f       	add	r30, r24
 708:	f9 1f       	adc	r31, r25
 70a:	30 81       	ld	r19, Z
 70c:	30 33       	cpi	r19, 0x30	; 48
 70e:	19 f4       	brne	.+6      	; 0x716 <write_zahl+0x1a2>
 710:	84 17       	cp	r24, r20
 712:	95 07       	cpc	r25, r21
 714:	54 f3       	brlt	.-44     	; 0x6ea <write_zahl+0x176>
	{ send_buffer[i++] = 32;
	}

	write_text(x_pos, y_pos, send_buffer);
 716:	ae 01       	movw	r20, r28
 718:	4f 5f       	subi	r20, 0xFF	; 255
 71a:	5f 4f       	sbci	r21, 0xFF	; 255
 71c:	68 2d       	mov	r22, r8
 71e:	83 2d       	mov	r24, r3
 720:	08 df       	rcall	.-496    	; 0x532 <write_text>
}
 722:	0a c0       	rjmp	.+20     	; 0x738 <write_zahl+0x1c4>
	pos_t = 12-komma-s_vk;
	for (i=0; i<s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
	{ send_buffer[pos++] = '.';
 724:	8e e2       	ldi	r24, 0x2E	; 46
 726:	89 83       	std	Y+1, r24	; 0x01

		// Nach-Kommastellen kopieren
		pos_t = 12-komma;
 728:	3c e0       	ldi	r19, 0x0C	; 12
 72a:	32 19       	sub	r19, r2
	pos_t = 12-komma-s_vk;
	for (i=0; i<s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
	{ send_buffer[pos++] = '.';
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	b0 cf       	rjmp	.-160    	; 0x690 <write_zahl+0x11c>
	pos = 0;
	pos_t = 12-komma-s_vk;
	for (i=0; i<s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 730:	01 11       	cpse	r16, r1
 732:	f8 cf       	rjmp	.-16     	; 0x724 <write_zahl+0x1b0>
		pos_t = 12-komma;
		for (i=0; i<s_nk; i++)
		{ send_buffer[pos++] = send_buffer[pos_t++];
		}
	}
	send_buffer[pos] = 0;     // Endmarke des Strings setzen
 734:	19 82       	std	Y+1, r1	; 0x01
 736:	ef cf       	rjmp	.-34     	; 0x716 <write_zahl+0x1a2>
	while ( (send_buffer[i] == 48) && (i < s_vk-1) )
	{ send_buffer[i++] = 32;
	}

	write_text(x_pos, y_pos, send_buffer);
}
 738:	2c 96       	adiw	r28, 0x0c	; 12
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	bf 90       	pop	r11
 756:	af 90       	pop	r10
 758:	9f 90       	pop	r9
 75a:	8f 90       	pop	r8
 75c:	7f 90       	pop	r7
 75e:	6f 90       	pop	r6
 760:	5f 90       	pop	r5
 762:	4f 90       	pop	r4
 764:	3f 90       	pop	r3
 766:	2f 90       	pop	r2
 768:	08 95       	ret

0000076a <clear_lcd_f>:
//------------------------------------------------------------
// Clear LCD
//------------------------------------------------------------
void clear_lcd_f(void)
{
	write_lcd_f('C',0x01);  // Clear Display
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	83 e4       	ldi	r24, 0x43	; 67
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	6a de       	rcall	.-812    	; 0x448 <write_lcd_f>
	wait_5ms(1);			// 2ms warten, bis LCD gelöscht ist
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	bb dd       	rcall	.-1162   	; 0x2f0 <wait_5ms>
	
	write_text(0,0," ");	// Blödes Zeichen auf Disply löschen
 77a:	47 e5       	ldi	r20, 0x57	; 87
 77c:	52 e0       	ldi	r21, 0x02	; 2
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	d7 ce       	rjmp	.-594    	; 0x532 <write_text>
 784:	08 95       	ret

00000786 <init_lcd>:
//--------------------------------------------------------------------------------------------
// Initialisierung des LCD's
//--------------------------------------------------------------------------------------------
void init_lcd(void)
{
	lcd_sclk(1);
 786:	81 e0       	ldi	r24, 0x01	; 1
	lcd_sid(0);
 788:	42 de       	rcall	.-892    	; 0x40e <lcd_sclk>
	
	lcd_on_off(0);
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	3a de       	rcall	.-908    	; 0x402 <lcd_sid>
	wait_5ms(2);
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	44 de       	rcall	.-888    	; 0x41a <lcd_on_off>
	 
	lcd_on_off(1); 
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	90 e0       	ldi	r25, 0x00	; 0
	wait_5ms(10);
 796:	ac dd       	rcall	.-1192   	; 0x2f0 <wait_5ms>
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	3f de       	rcall	.-898    	; 0x41a <lcd_on_off>
	
	write_lcd_f('C',0x34);      // set 8-Bit-Interface RE = 1
 79c:	8a e0       	ldi	r24, 0x0A	; 10
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	a7 dd       	rcall	.-1202   	; 0x2f0 <wait_5ms>
 7a2:	64 e3       	ldi	r22, 0x34	; 52
 7a4:	70 e0       	ldi	r23, 0x00	; 0
	write_lcd_f('C',0x09);      // 4-Zeilen-Modus, 5-Dot Font-Breite
 7a6:	83 e4       	ldi	r24, 0x43	; 67
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	4e de       	rcall	.-868    	; 0x448 <write_lcd_f>
 7ac:	69 e0       	ldi	r22, 0x09	; 9
 7ae:	70 e0       	ldi	r23, 0x00	; 0
	
	write_lcd_f('C',0x30);      // set 8-Bit-Interface RE = 0
 7b0:	83 e4       	ldi	r24, 0x43	; 67
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	49 de       	rcall	.-878    	; 0x448 <write_lcd_f>
 7b6:	60 e3       	ldi	r22, 0x30	; 48
	write_lcd_f('C',0x0C);      // Display ON, Cursor OFF
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	83 e4       	ldi	r24, 0x43	; 67
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	44 de       	rcall	.-888    	; 0x448 <write_lcd_f>

	clear_lcd_f();				// Clear Display
 7c0:	6c e0       	ldi	r22, 0x0C	; 12
	
	write_lcd_f('C',0x07);      // Entry Mode
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	83 e4       	ldi	r24, 0x43	; 67
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	3f de       	rcall	.-898    	; 0x448 <write_lcd_f>
 7ca:	cf df       	rcall	.-98     	; 0x76a <clear_lcd_f>
	
	write_text(0,0,"My first Board       ");
 7cc:	67 e0       	ldi	r22, 0x07	; 7
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	83 e4       	ldi	r24, 0x43	; 67
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	39 de       	rcall	.-910    	; 0x448 <write_lcd_f>
	write_text(1,0, "-------------       ");
 7d6:	49 e1       	ldi	r20, 0x19	; 25
 7d8:	52 e0       	ldi	r21, 0x02	; 2
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	a9 de       	rcall	.-686    	; 0x532 <write_text>
	write_text(2,0, "                    ");
 7e0:	4f e2       	ldi	r20, 0x2F	; 47
 7e2:	52 e0       	ldi	r21, 0x02	; 2
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	a4 de       	rcall	.-696    	; 0x532 <write_text>
 7ea:	44 e4       	ldi	r20, 0x44	; 68
	write_text(3,0, "                    ");
 7ec:	52 e0       	ldi	r21, 0x02	; 2
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	9f de       	rcall	.-706    	; 0x532 <write_text>
 7f4:	44 e4       	ldi	r20, 0x44	; 68
 7f6:	52 e0       	ldi	r21, 0x02	; 2
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	9a ce       	rjmp	.-716    	; 0x532 <write_text>
 7fe:	08 95       	ret

00000800 <init_mocca>:
	init_mocca();
}

void init_mocca(void)
{
	DDRA = 0xFF;	// LED Port als Ausgang
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	81 b9       	out	0x01, r24	; 1
	DDRK = 0x00;	// Schalter Port als Eingang
 804:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	DDRE = 0x00;	// Taster als Eingang
 808:	1d b8       	out	0x0d, r1	; 13
	DDRG = 0x27;	// LCD port als Ausgang
 80a:	97 e2       	ldi	r25, 0x27	; 39
 80c:	93 bb       	out	0x13, r25	; 19
	DDRH = 0x78;	// RGB, CTS als Ausgang
 80e:	98 e7       	ldi	r25, 0x78	; 120
 810:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	
	DDRJ = 0xFF;	// LED-Matrix
 814:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	init_5ms_timer();
	
	sei();			// Global interrups aktivieren
	
	init_lcd();
	lcd_light(10);
 818:	0b dd       	rcall	.-1514   	; 0x230 <init_5ms_timer>
 81a:	78 94       	sei
 81c:	b4 df       	rcall	.-152    	; 0x786 <init_lcd>
 81e:	8a e0       	ldi	r24, 0x0A	; 10
 820:	02 ce       	rjmp	.-1020   	; 0x426 <lcd_light>
 822:	08 95       	ret

00000824 <__udivmodsi4>:
 824:	a1 e2       	ldi	r26, 0x21	; 33
 826:	1a 2e       	mov	r1, r26
 828:	aa 1b       	sub	r26, r26
 82a:	bb 1b       	sub	r27, r27
 82c:	fd 01       	movw	r30, r26
 82e:	0d c0       	rjmp	.+26     	; 0x84a <__udivmodsi4_ep>

00000830 <__udivmodsi4_loop>:
 830:	aa 1f       	adc	r26, r26
 832:	bb 1f       	adc	r27, r27
 834:	ee 1f       	adc	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	a2 17       	cp	r26, r18
 83a:	b3 07       	cpc	r27, r19
 83c:	e4 07       	cpc	r30, r20
 83e:	f5 07       	cpc	r31, r21
 840:	20 f0       	brcs	.+8      	; 0x84a <__udivmodsi4_ep>
 842:	a2 1b       	sub	r26, r18
 844:	b3 0b       	sbc	r27, r19
 846:	e4 0b       	sbc	r30, r20
 848:	f5 0b       	sbc	r31, r21

0000084a <__udivmodsi4_ep>:
 84a:	66 1f       	adc	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	1a 94       	dec	r1
 854:	69 f7       	brne	.-38     	; 0x830 <__udivmodsi4_loop>
 856:	60 95       	com	r22
 858:	70 95       	com	r23
 85a:	80 95       	com	r24
 85c:	90 95       	com	r25
 85e:	9b 01       	movw	r18, r22
 860:	ac 01       	movw	r20, r24
 862:	bd 01       	movw	r22, r26
 864:	cf 01       	movw	r24, r30
 866:	08 95       	ret

00000868 <__umulhisi3>:
 868:	a2 9f       	mul	r26, r18
 86a:	b0 01       	movw	r22, r0
 86c:	b3 9f       	mul	r27, r19
 86e:	c0 01       	movw	r24, r0
 870:	a3 9f       	mul	r26, r19
 872:	70 0d       	add	r23, r0
 874:	81 1d       	adc	r24, r1
 876:	11 24       	eor	r1, r1
 878:	91 1d       	adc	r25, r1
 87a:	b2 9f       	mul	r27, r18
 87c:	70 0d       	add	r23, r0
 87e:	81 1d       	adc	r24, r1
 880:	11 24       	eor	r1, r1
 882:	91 1d       	adc	r25, r1
 884:	08 95       	ret

00000886 <_exit>:
 886:	f8 94       	cli

00000888 <__stop_program>:
 888:	ff cf       	rjmp	.-2      	; 0x888 <__stop_program>
